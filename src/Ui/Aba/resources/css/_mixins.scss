@import './_unit-conversions.scss';
@import "./_variables.scss";

/*-------------------------------------------------------------------*\
  #MIXINS-AND-FUNCTIONS
\*-------------------------------------------------------------------*/

$shadow-thickness: rem(0) rem(3px) rem(1px) rem(-2px) rgba(0, 0, 0, 0.2);
$shadow-ambient: rem(0) rem(0) rem(5px) rem(0) rgba(0, 0, 0, 0.1);
$placeholder-color: $color--primary-light;

@function shadow($z-index) {
  @return rem(0) rem($z-index * 1px) rem($z-index * 2px) rem(0) rgba(0, 0, 0, 0.25),
          $shadow-ambient,
          $shadow-thickness;
}

@mixin placeholder-background() {
  background-color: $color--background;
  background-image: linear-gradient(45deg, $placeholder-color 25%, transparent 25%, transparent 75%,
          $placeholder-color 75%, $placeholder-color),
  linear-gradient(45deg, $placeholder-color 25%, transparent 25%, transparent 75%,
                  $placeholder-color 75%, $placeholder-color);
  background-size: 30px 30px;
  background-position: 0 0, 15px 15px;
}

@mixin no-list-formatting() {
  list-style: none;
  padding: 0;
  margin: 0;
}

@mixin dont-handle-mouse-events() {
  pointer-events: none;
  cursor: default;
}

@mixin remove-blue-highlight-rectangle-on-touch() {
  -webkit-tap-highlight-color: transparent;
}

@function prefixed-selector($selector, $prefix) {
  @if str-length($selector) == 0 {
    @return $selector;
  }

  $result: "";
  $pos: str-index($selector, " ");

  @while $pos {
    $result: $result + $prefix + str-slice($selector, 1, $pos - 1);

    $selector: str-slice($selector, $pos + 1);
    $pos: str-index($selector, " ");
  }

  $result: $result + $prefix + $selector;

  @return $result;
}

@function bg($selector) {
  @for $i from 1 through length($bg-colors) {
    $bg: nth($bg-colors, $i);
    @if nth($bg, 1) == $selector {
      @return $bg;
    }
  }

  @return null;
}

@function fg($selector) {
  @for $i from 1 through length($fg-colors) {
    $fg: nth($fg-colors, $i);
    @if nth($fg, 1) == $selector {
      @return $fg;
    }
  }

  @return null;
}

@function bg-color($bg) {
  @return nth($bg, 3);
}

@function dark($color) {
  @return lightness($color) < 40;
}

@function fg-default-color($bg, $fg) {
  @return if(dark(bg-color($bg)), nth($fg, 4), nth($fg, 3));
}

@function fg-emotion-color($bg, $fg) {
  $type: nth($bg, 2);

  @if ($type == "emotion") {
    @return null;
  }

  @return fg-default-color($bg, $fg);

}

@function fg-brand-color($bg, $fg) {
  $type: nth($bg, 2);
  $selector: nth($fg, 1);
  $default-fg: fg("");

  @if ($type == "emotion") {
    @return null;
  }

  @if ($type == "brand") {
    @return null;
  }

  $brand-bg: bg($selector);
  @if dark(bg-color($bg)) == dark(bg-color($brand-bg)) {
    @return fg-default-color($bg, $default-fg);
  }

  @return bg-color($brand-bg);

}

@function fg-highlighted-color($bg, $fg) {
  $bg-color: bg-color($bg);
  $fg-color: fg-color($bg, $fg);

  @return mix($bg-color, $fg-color, 93);
}

@function fg-pressed-color($bg, $fg) {
  $bg-color: bg-color($bg);
  $fg-color: fg-color($bg, $fg);

  @return mix($bg-color, $fg-color, 87);
}

@function fg-delimiter-color($bg) {
  $default-fg: fg("");

  @return rgba(fg-default-color($bg, $default-fg), 0.5);
}

@function fg-color($bg, $fg) {
  $type: nth($fg, 2);
  $selector: nth($fg, 1);

  @if ($type == "brand") {
    @return fg-brand-color($bg, $fg);
  }
  @if ($type == "emotion") {
    @return fg-emotion-color($bg, $fg);
  }

  @return fg-default-color($bg, $fg);
}

@mixin bg-rule($bg, $default: true) {
  $selector: prefixed-selector(nth($bg, 1), ".-on-");

  @if $default == true and str-length($selector) == 0 {
    @content
  }

  $selector: if(str-length($selector) != 0, $selector, ".-on-neutral");
  &#{$selector} {
    @content
  }
}

@mixin fg-rule($bg, $fg) {
  @if fg-color($bg, $fg) {
    $selector: prefixed-selector(nth($fg, 1), ".-");
    @if $selector == "" {
      @content
    }

    $selector: if(str-length($selector) != 0, $selector, ".-neutral");

    &#{$selector}, & #{$selector} {
      @content
    }
  }
}

